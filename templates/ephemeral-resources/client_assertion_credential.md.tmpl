---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Name}} ({{.Type}})

{{ .Description | trimspace }}


## Example Usage

{{ tffile (printf "examples/ephemeral-resources/%s/ephemeral-resource.tf" .Name)}}


## Azure DevOps Example

This is an example to show how to use the `{{.Name}}` resource with Azure DevOps terraform provider.

{{ tffile (printf "examples/ephemeral-resources/%s/azure-devops-example.tf" .Name)}}

To use this, you will first need a Service Connection in Azure DevOps and use Workload identity federation.

An example pipeline could look like this (change `my-service-connection` to the name of your service connection):

```yaml
trigger:
  - main

pool:
  vmImage: ubuntu-latest

steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: "my-service-connection"
      scriptType: "bash"
      scriptLocation: "inlineScript"
      inlineScript: |
        set -e
        TEMP_DIR=$(mktemp -d)
        env --chdir=$TEMP_DIR curl --fail -L -o tenv_v4.1.0_Linux_x86_64.tar.gz https://github.com/tofuutils/tenv/releases/download/v4.1.0/tenv_v4.1.0_Linux_x86_64.tar.gz
        env --chdir=$TEMP_DIR tar xzvf tenv_v4.1.0_Linux_x86_64.tar.gz
        export PATH=$TEMP_DIR:$PATH
        tenv tf install 1.10.5
        tenv tf use 1.10.5
        export CI=true
        terraform init
        terraform plan
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
```


{{ .SchemaMarkdown | trimspace }}
{{- if .HasImport }}

## Import

Import is supported using the following syntax:

{{ printf "{{codefile \"shell\" %q}}" .ImportFile }}
{{- end }}